language: cpp

env:
  global:
    - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
    - BOOST_VERSION=1.65.1
    - BOOST_URL="https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.tar.gz"
    - CODECOV=no

cache:
    directories:
      - ${DEPS_DIR}

matrix:
  include:
    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=clang-4.0 CXX_COMPILER=clang++-4.0
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
          packages:
            - clang-4.0
            - libstdc++-6-dev
            - ninja-build

    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=clang-5.0 CXX_COMPILER=clang++-5.0
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
            - libstdc++-6-dev
            - ninja-build

    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=gcc-6 CXX_COMPILER=g++-6 CODECOV=yes
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - ninja-build
            - lcov

    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=gcc-7 CXX_COMPILER=g++-7 CODECOV=yes
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - ninja-build
            - lcov

    - os: osx
      osx_image: xcode9.3
      env: BUILD_TYPE=Debug


before_install:
  - |
      if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
        brew update
      fi

install:
  # Download and install Boost
  - |
      if [[ ${TRAVIS_OS_NAME} == "linux" && ${BOOST_VERSION} != "default" ]]; then
        if [ ! -f "${DEPS_DIR}/boost/${BOOST_VERSION}_cached" ]; then
          # create dirs for source and install
          mkdir -p ${DEPS_DIR}/boost${BOOST_VERSION}
          mkdir -p ${DEPS_DIR}/boost
          rm -rf ${DEPS_DIR}/boost/*

          # download
          travis_retry wget --no-check-certificate --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${DEPS_DIR}/boost${BOOST_VERSION}
          pushd ${DEPS_DIR}/boost${BOOST_VERSION}

          # configure and install
          if [ "$CXX" = "${CXX_COMPILER}" ]; then echo "using cc : ${CC_COMPILER} : ${CXX_COMPILER} ;" > $HOME/user-config.jam; fi
          ./bootstrap.sh --prefix=${DEPS_DIR}/boost/ --with-libraries=system,program_options,date_time,filesystem,regex,log
          ./b2 -j 4 -d0 install
          popd
          rm -rf ${DEPS_DIR}/boost/include/boost/{compute,compute.hpp}
          touch ${DEPS_DIR}/boost/${BOOST_VERSION}_cached
        else
          echo 'Using cached Boost ${BOOST_VERSION} libraries.'
        fi

        export CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DBOOST_ROOT=${DEPS_DIR}/boost"
      fi
  # Setup compilers
  - |
      if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
        if [[ "${CC_COMPILER}" != "" ]]; then export CC=${CC_COMPILER}; fi
        ${CC} --version

        if [[ "${CXX_COMPILER}" != "" ]]; then export CXX=${CXX_COMPILER}; fi
        ${CXX} --version
      fi
  # Update references on OSX
  - |
      if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
        brew install boost
        brew install ninja
      fi
  # Setup code coverage for GCC builds
  - |
      if [[ "${CODECOV}" == "yes" ]]; then
        export CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_CXX_FLAGS='-fprofile-arcs -ftest-coverage'"
      fi

script:
  - mkdir bin
  - cd bin
  - cmake -GNinja .. $CMAKE_OPTIONS
  - cmake --build . --target all
  - ctest --verbose

after_success:
  # Creating report
  - cd ${TRAVIS_BUILD_DIR}
  - lcov --directory . --capture --output-file coverage.info # capture coverage info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
  - lcov --list coverage.info #debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
